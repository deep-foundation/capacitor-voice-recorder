File: ./src/hooks/use-recording.tsx
import { useEffect, useRef, useState } from "react";
import { DeepClient } from "@deep-foundation/deeplinks/imports/client";
import { startRecording } from "../start-recording";
import {
  IStopAndUploadRecordingOptions,
  stopAndUploadRecording,
} from "../stop-and-upload-recording";
import { packageLog } from "../package-log";

export function useRecording(options: IUseRecordingOptions) {
  const log = packageLog.extend(useRecording.name);
  const [error, setError] = useState<unknown | null>(null);
  log({ error, setError });

  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  log({ timeoutRef });

  const initiateRecording = async () => {
    try {
      await startRecording();
      log("Recording started");
      const { savingIntervalInMs = 1 * 60 * 1000 } = options;

      timeoutRef.current = setInterval(async () => {
        log("Going to stop and upload recording");
        await stopAndUploadRecording(options).catch(setError);
      }, savingIntervalInMs);
    } catch (error) {
      log({ error: error });
      setError(error);
    }
  };

  const cleanupRecording = () => {
    log("Cleaning up recording");
    stopAndUploadRecording(options);
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
  };

  useEffect(() => {
    initiateRecording();

    return cleanupRecording;
  }, [options]);

  return { error };
}

export type IUseRecordingOptions = {
  deep: DeepClient;
  savingIntervalInMs?: number;
} & IStopAndUploadRecordingOptions;

File: ./src/hooks/use-recording.test.tsx
import { renderHook, act } from "@testing-library/react";
import { useRecording, IUseRecordingOptions } from "./use-recording";
import { startRecording } from "../start-recording"; 
import { stopAndUploadRecording } from "../stop-and-upload-recording";

jest.mock("../start-recording");
jest.mock("../stop-and-upload-recording");

(startRecording as jest.Mock).mockImplementation(jest.fn());
(stopAndUploadRecording as jest.Mock).mockImplementation(jest.fn());

describe("useRecording", () => {
  let options: IUseRecordingOptions;

  beforeEach(() => {
    options = {
      deep: {} as any,
      savingIntervalInMs: 5000,
    };
    jest.useFakeTimers();
    (startRecording as jest.Mock).mockClear();
    (stopAndUploadRecording as jest.Mock).mockClear();
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  const waitForNextTick = () => new Promise(resolve => setTimeout(resolve, 0));

  it("should initiate recording on mount", () => {
    renderHook(() => useRecording(options));
    expect(startRecording).toHaveBeenCalledTimes(1);
  });

  it("should stop and upload recording at the specified interval", () => {
    renderHook(() => useRecording(options));

    act(() => {
      jest.advanceTimersByTime(5000);
    });

    expect(stopAndUploadRecording).toHaveBeenCalledTimes(1);
  });

  it("should handle errors from startRecording correctly", async () => {
    (startRecording as jest.Mock).mockRejectedValue(new Error("Test Error"));
    const { result } = renderHook(() => useRecording(options));

    await act(async () => {
      await waitForNextTick(); 
    });

    expect(result.current.error).toEqual(new Error("Test Error"));
  });

  it("should handle errors from stopAndUploadRecording correctly", async () => {
    (stopAndUploadRecording as jest.Mock).mockRejectedValue(new Error("Upload Error"));
    renderHook(() => useRecording(options));

    await act(async () => {
      jest.advanceTimersByTime(5000);
      await waitForNextTick();
    });

    expect(stopAndUploadRecording).toHaveBeenCalledTimes(1);
    // Add additional assertions if necessary, e.g., expect(result.current.error).toEqual(new Error("Upload Error"));
  });

  it("should cleanup recording on unmount", () => {
    const { unmount } = renderHook(() => useRecording(options));
    
    act(() => {
      unmount();
    });
    
    expect(stopAndUploadRecording).toHaveBeenCalledTimes(1);
  });
  
});
